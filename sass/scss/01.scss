// $color:red;
// body{
//     background-color: $color;
// } 
/* 我是作者 */
//我是作者
/*!我是强调注释作者*/


// sass中的作用域
// sass中的作用域类似于ES6中的作用域

//此时的$color就是在全局作用域
$color:red; 
// body{
//     // 我们可以在块级作用域中引用他
//     background-color: $color;
//     // 此时的$color1在块级作用域中
//     $color1:green;
// }
// div{
//     // 此时在其他作用域引用$color1就会报错
//     background-color: $color1;
// }

// 那么如何让其他作用于可以也使用块级作用域中的变量呢？
// 我们可以在块级作用域变量后添加英文!global
body{
    $color1:green !global;
    background-color: $color;
}
div{
    // 此时再用变量$color1就不会报错了
    background-color: $color1;
}

// sass中的数据类型
    // 数字：1，13，2.3，10px,4a
    // 注意!!!4a虽然会被sass当成一个数字，但是他是没有意义的，在sass中使用会报错
    // 单位会和数字当作一个整体，可以进行算术运算

    // 字符串：str,'stsr',"staa"
    // 当只有一个字符串时，可以不用加引号，如果有多个字符串必须加引号
    
    // 颜色：blue,#f1f1f1,rgba(255,0,0,0.8),rgba(#f1f1f1,0.8)
    // rgba()括号中前面三位表示颜色，最后一位表示透明度
    
    // 布尔值：false，true
    // 只有自身为false或者null时才会返回false，其他均会返回true
    
    // 空值：null
    
    // 数组(list): 20px, 1rem 0.5rem 3rem 1.5rem,blue, dotted
    // maps,相当于js中的对象：(key:value,key:value,key:value),只不过是用的()

// 数组扩展方法
// 此时数组中有4个元素
$list1: 10px 20px 30px 40px;
// 此时数组中有4个元素
$list1: 10px,20px,30px,40px;
// 此时数组中有两个元素
$list2: 10px 20px,30px 40px;
// 此时数组中有两个元素
$list2: (10px 20px),(30px 40px);
// 此时数组中有两个元素
$list2: (10px 20px) (30px 40px);

// 运算符
// +
// -
// 加减和js中的一样，只不过在数字带单位的情况下原算出来的数字也会带单位
// 如果和字符串进行运算，会做拼串处理

// *
// 两个数字进行运算时，如果这两个数字都带单位，则编译不同过
// 如：$num: 2px + 3p;  此时编译会不通过
// $num: 2px * 2px;
// body{
//     width: $num;
// }



// / （除）
// sass进行除法运算时不会四舍五入，但是会精确到小数点后5位
// $numc: 12 / 6px;     编译不通过
// $numc: 12px / 6;        编译通过
// body{
//     height: $numc;
// }

// %（取余数）
// 写余数运算时注意加空格
// $numy: 8%3px;  //此时vscode会报错，但是编译正常通过
// body{
//     height: $numy;
// }

// 关系运算符
// >
// <
// >=
// <=
// ==
// !==

// 注意一下：
// $a: 1 == 1px;  //true
// $b: 'a' == a;  //true
// body{
//     width: $a;
//     height: $b;
// }

// 逻辑运算符
// and  与
// or   或
// not  非

// 颜色值的运算
$rgb: #010203 + #040506;
// 此时颜色值会分为三个值来运算
// 01 + 04  
// 02 + 05
// 03 + 06
// 乘法同理

$colors: rgba(255,0,0,0.75) + rgba(0,255,0,0.75);
// 运算此种类型的颜色值时，最后一位的透明度必须一样，否则会报错
// body{
//     background-color: $rgb;
//     color: $colors;
// }

// 运算符优先级
// 0.()
// 1.*  /   %
// 2.+    -
// 3.>   <   >=   <=